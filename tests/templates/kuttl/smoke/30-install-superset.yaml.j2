---
apiVersion: kuttl.dev/v1beta1
kind: TestStep
metadata:
  name: install-superset
timeout: 300
---
apiVersion: v1
kind: Secret
metadata:
  name: superset-credentials
type: Opaque
stringData:
  adminUser.username: admin
  adminUser.firstname: Superset
  adminUser.lastname: Admin
  adminUser.email: admin@superset.com
  adminUser.password: admin
  connections.secretKey: thisISaSECRET_1234
  connections.sqlalchemyDatabaseUri: postgresql://superset:superset@superset-postgresql/superset
---
apiVersion: superset.stackable.tech/v1alpha1
kind: SupersetCluster
metadata:
  name: superset
spec:
  image:
{% if test_scenario['values']['superset'].find(",") > 0 %}
    custom: "{{ test_scenario['values']['superset'].split(',')[1] }}"
    productVersion: "{{ test_scenario['values']['superset'].split(',')[0] }}"
{% else %}
    productVersion: "{{ test_scenario['values']['superset'] }}"
{% endif %}
    pullPolicy: IfNotPresent
  clusterConfig:
    credentialsSecret: superset-credentials
{% if lookup('env', 'VECTOR_AGGREGATOR') %}
    vectorAggregatorConfigMapName: vector-aggregator-discovery
{% endif %}
  nodes:
    envOverrides:
      COMMON_VAR: role-value # overridden by role group below
      ROLE_VAR: role-value   # only defined here at role level
    config:
      logging:
        enableVectorAgent: {{ lookup('env', 'VECTOR_AGGREGATOR') | length > 0 }}
        containers:
          superset:
            console:
              level: DEBUG
            file:
              level: DEBUG
            loggers:
              ROOT:
                level: DEBUG
              flask_appbuilder.security:
                level: DEBUG
    configOverrides:
      superset_config.py:
        EXPERIMENTAL_FILE_HEADER: |
          COMMON_HEADER_VAR = "role-value"
          ROLE_HEADER_VAR = "role-value"
        EXPERIMENTAL_FILE_FOOTER: |
          ROLE_FOOTER_VAR = "role-value"
        # Enable the security API to be able to create roles from the test
        FAB_ADD_SECURITY_API: "True"
        # Enable FAB logging
        SILENCE_FAB: "False"
    roleGroups:
      default:
        replicas: 1
        configOverrides:
          superset_config.py:
            EXPERIMENTAL_FILE_HEADER: |
              COMMON_HEADER_VAR = "group-value"
        envOverrides:
          COMMON_VAR: group-value # overrides role value
          GROUP_VAR: group-value # only defined here at group level
